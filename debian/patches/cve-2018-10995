Description: undisclosed security fix for CVE-2018-10995
Author: Tim Wickberg <tim@schedmd.com>
Last-Update: 2018-05-18

diff --git a/slurm/slurm_errno.h b/slurm/slurm_errno.h
index 3fcb65b5fc..c1d6f935e7 100644
--- a/slurm/slurm_errno.h
+++ b/slurm/slurm_errno.h
@@ -201,6 +201,7 @@ enum {
 	ESLURM_DUPLICATE_STEP_ID =			2110,
 	ESLURM_INVALID_CORE_CNT,
 	ESLURM_X11_NOT_AVAIL,
+	ESLURM_GROUP_ID_MISSING,
 
 	/* switch specific error codes, specific values defined in plugin module */
 	ESLURM_SWITCH_MIN = 3000,
diff --git a/src/common/slurm_errno.c b/src/common/slurm_errno.c
index ed90fa597d..74cfc6b1c5 100644
--- a/src/common/slurm_errno.c
+++ b/src/common/slurm_errno.c
@@ -349,6 +349,8 @@ static slurm_errtab_t slurm_errtab[] = {
 	  "Duplicate job step id"				},
 	{ ESLURM_X11_NOT_AVAIL,
 	  "X11 forwarding not available"			},
+	{ ESLURM_GROUP_ID_MISSING,
+	  "Invalid group id"					},
 
 	/* slurmd error codes */
 	{ ESLRUMD_PIPE_ERROR_ON_TASK_SPAWN,
diff --git a/src/slurmctld/job_mgr.c b/src/slurmctld/job_mgr.c
index bf6726a7be..6007880bc8 100644
--- a/src/slurmctld/job_mgr.c
+++ b/src/slurmctld/job_mgr.c
@@ -9091,8 +9091,8 @@ static int _validate_job_desc(job_desc_msg_t * job_desc_msg, int allocate,
 		return ESLURM_USER_ID_MISSING;
 	}
 	if ( job_desc_msg->group_id == NO_VAL ) {
-		debug("_validate_job_desc: job failed to specify group");
-		job_desc_msg->group_id = 0;	/* uses user default */
+		info("_validate_job_desc: job failed to specify Group");
+		return ESLURM_GROUP_ID_MISSING;
 	}
 	if (job_desc_msg->contiguous == NO_VAL16)
 		job_desc_msg->contiguous = 0;
diff --git a/src/slurmctld/proc_req.c b/src/slurmctld/proc_req.c
index eccc3140ef..263da21a4c 100644
--- a/src/slurmctld/proc_req.c
+++ b/src/slurmctld/proc_req.c
@@ -983,6 +983,26 @@ extern bool validate_operator(uid_t uid)
 		return false;
 }
 
+static int _valid_id(char *caller, job_desc_msg_t *msg, uid_t uid, gid_t gid)
+{
+	if (validate_slurm_user(uid))
+		return SLURM_SUCCESS;
+
+	if (uid != msg->user_id) {
+		error("%s: Requested UID=%u doesn't match user UID=%u.",
+		      caller, msg->user_id, uid);
+		return ESLURM_USER_ID_MISSING;
+	}
+
+	if (gid != msg->group_id) {
+		error("%s: Requested GID=%u doesn't match user GID=%u.",
+		      caller, msg->group_id, gid);
+		return ESLURM_GROUP_ID_MISSING;
+	}
+
+	return SLURM_SUCCESS;
+}
+
 /* _kill_job_on_msg_fail - The request to create a job record successed,
  *	but the reply message to srun failed. We kill the job to avoid
  *	leaving it orphaned */
@@ -1203,11 +1223,12 @@ static void _slurm_rpc_allocate_pack(slurm_msg_t * msg)
 		READ_LOCK, WRITE_LOCK, WRITE_LOCK, READ_LOCK, READ_LOCK };
 	uid_t uid = g_slurm_auth_get_uid(msg->auth_cred,
 					 slurmctld_config.auth_info);
+	gid_t gid = g_slurm_auth_get_gid(msg->auth_cred,
+					 slurmctld_config.auth_info);
 	uint32_t job_uid = NO_VAL;
 	struct job_record *job_ptr, *first_job_ptr = NULL;
 	char *err_msg = NULL, **job_submit_user_msg = NULL;
 	ListIterator iter;
-	bool priv_user;
 	List submit_job_list = NULL;
 	uint32_t pack_job_id = 0, pack_job_offset = 0;
 	hostset_t jobid_hostset = NULL;
@@ -1253,7 +1274,6 @@ static void _slurm_rpc_allocate_pack(slurm_msg_t * msg)
 	       uid);
 	pack_cnt = list_count(job_req_list);
 	job_submit_user_msg = xmalloc(sizeof(char *) * pack_cnt);
-	priv_user = validate_slurm_user(uid);
 	submit_job_list = list_create(NULL);
 	_throttle_start(&active_rpc_cnt);
 	lock_slurmctld(job_write_lock);
@@ -1262,10 +1282,9 @@ static void _slurm_rpc_allocate_pack(slurm_msg_t * msg)
 	while ((job_desc_msg = (job_desc_msg_t *) list_next(iter))) {
 		if (job_uid == NO_VAL)
 			job_uid = job_desc_msg->user_id;
-		if ((uid != job_desc_msg->user_id) && !priv_user) {
-			error_code = ESLURM_USER_ID_MISSING;
-			error("Security violation, REQUEST_JOB_PACK_ALLOCATION from uid=%d",
-			      uid);
+
+		if ((error_code = _valid_id("REQUEST_JOB_PACK_ALLOCATION",
+					    job_desc_msg, uid, gid))) {
 			break;
 		}
 
@@ -1454,6 +1473,8 @@ static void _slurm_rpc_allocate_resources(slurm_msg_t * msg)
 		READ_LOCK, WRITE_LOCK, WRITE_LOCK, READ_LOCK, READ_LOCK };
 	uid_t uid = g_slurm_auth_get_uid(msg->auth_cred,
 					 slurmctld_config.auth_info);
+	gid_t gid = g_slurm_auth_get_gid(msg->auth_cred,
+					 slurmctld_config.auth_info);
 	int immediate = job_desc_msg->immediate;
 	bool do_unlock = false;
 	bool reject_job = false;
@@ -1471,11 +1492,12 @@ static void _slurm_rpc_allocate_resources(slurm_msg_t * msg)
 		goto send_msg;
 	}
 
-	if ((uid != job_desc_msg->user_id) && (!validate_slurm_user(uid))) {
-		error_code = ESLURM_USER_ID_MISSING;
-		error("Security violation, RESOURCE_ALLOCATE from uid=%d",
-		      uid);
+	if ((error_code = _valid_id("REQUEST_RESOURCE_ALLOCATION",
+				    job_desc_msg, uid, gid))) {
+		reject_job = true;
+		goto send_msg;
 	}
+
 	debug2("sched: Processing RPC: REQUEST_RESOURCE_ALLOCATION from uid=%d",
 	       uid);
 
@@ -2851,27 +2873,6 @@ static void _slurm_rpc_job_step_get_info(slurm_msg_t * msg)
 	}
 }
 
-static bool _is_valid_will_run_user(job_desc_msg_t *job_desc_msg, uid_t uid)
-{
-	char *account = NULL;
-
-	if ((uid == job_desc_msg->user_id) || validate_operator(uid))
-		return true;
-
-	if (job_desc_msg->job_id != NO_VAL) {
-		struct job_record *job_ptr;
-		job_ptr = find_job_record(job_desc_msg->job_id);
-		if (job_ptr)
-			account = job_ptr->account;
-	} else if (job_desc_msg->account)
-		account = job_desc_msg->account;
-
-	if (account && assoc_mgr_is_user_acct_coord(acct_db_conn, uid, account))
-		return true;
-
-	return false;
-}
-
 /* _slurm_rpc_job_will_run - process RPC to determine if job with given
  *	configuration can be initiated */
 static void _slurm_rpc_job_will_run(slurm_msg_t * msg)
@@ -2889,6 +2890,8 @@ static void _slurm_rpc_job_will_run(slurm_msg_t * msg)
 		READ_LOCK, WRITE_LOCK, WRITE_LOCK, READ_LOCK, READ_LOCK };
 	uid_t uid = g_slurm_auth_get_uid(msg->auth_cred,
 					 slurmctld_config.auth_info);
+	gid_t gid = g_slurm_auth_get_gid(msg->auth_cred,
+					 slurmctld_config.auth_info);
 	uint16_t port;	/* dummy value */
 	slurm_addr_t resp_addr;
 	will_run_response_msg_t *resp = NULL;
@@ -2904,10 +2907,10 @@ static void _slurm_rpc_job_will_run(slurm_msg_t * msg)
 	debug2("Processing RPC: REQUEST_JOB_WILL_RUN from uid=%d", uid);
 
 	/* do RPC call */
-	if (!_is_valid_will_run_user(job_desc_msg, uid)) {
-		error_code = ESLURM_USER_ID_MISSING;
-		error("Security violation, JOB_WILL_RUN RPC from uid=%d", uid);
-	}
+	if ((error_code = _valid_id("REQUEST_JOB_WILL_RUN",
+				    job_desc_msg, uid, gid)))
+		goto send_reply;
+
 	if ((job_desc_msg->alloc_node == NULL)
 	    ||  (job_desc_msg->alloc_node[0] == '\0')) {
 		error_code = ESLURM_INVALID_NODE_NAME;
@@ -3912,6 +3915,8 @@ static void _slurm_rpc_submit_batch_job(slurm_msg_t *msg)
 		READ_LOCK, WRITE_LOCK, WRITE_LOCK, READ_LOCK, READ_LOCK };
 	uid_t uid = g_slurm_auth_get_uid(msg->auth_cred,
 					 slurmctld_config.auth_info);
+	gid_t gid = g_slurm_auth_get_gid(msg->auth_cred,
+					 slurmctld_config.auth_info);
 	char *err_msg = NULL, *job_submit_user_msg = NULL;
 	bool reject_job = false;
 
@@ -3924,13 +3929,12 @@ static void _slurm_rpc_submit_batch_job(slurm_msg_t *msg)
 		goto send_msg;
 	}
 
-	/* do RPC call */
-	if ( (uid != job_desc_msg->user_id) && (!validate_super_user(uid)) ) {
-		/* NOTE: Super root can submit a batch job for any user */
-		error_code = ESLURM_USER_ID_MISSING;
-		error("Security violation, REQUEST_SUBMIT_BATCH_JOB from uid=%d",
-		      uid);
+	if ((error_code = _valid_id("REQUEST_SUBMIT_BATCH_JOB",
+				    job_desc_msg, uid, gid))) {
+		reject_job = true;
+		goto send_msg;
 	}
+
 	if ((job_desc_msg->alloc_node == NULL) ||
 	    (job_desc_msg->alloc_node[0] == '\0')) {
 		error_code = ESLURM_INVALID_NODE_NAME;
@@ -4054,10 +4058,11 @@ static void _slurm_rpc_submit_batch_pack_job(slurm_msg_t *msg)
 	List job_req_list = (List) msg->data;
 	uid_t uid = g_slurm_auth_get_uid(msg->auth_cred,
 					 slurmctld_config.auth_info);
+	gid_t gid = g_slurm_auth_get_gid(msg->auth_cred,
+					 slurmctld_config.auth_info);
 	uint32_t job_uid = NO_VAL;
 	char *err_msg = NULL, *job_submit_user_msg = NULL;
 	bool reject_job = false;
-	bool is_super_user;
 	List submit_job_list = NULL;
 	hostset_t jobid_hostset = NULL;
 	char tmp_str[32];
@@ -4098,19 +4103,18 @@ static void _slurm_rpc_submit_batch_pack_job(slurm_msg_t *msg)
 	}
 
 	/* Validate the individual request */
-	is_super_user = validate_super_user(uid);
 	lock_slurmctld(job_read_lock);     /* Locks for job_submit plugin use */
 	iter = list_iterator_create(job_req_list);
 	while ((job_desc_msg = (job_desc_msg_t *) list_next(iter))) {
 		if (job_uid == NO_VAL)
 			job_uid = job_desc_msg->user_id;
-		if ((uid != job_desc_msg->user_id) && !is_super_user) {
-			/* NOTE: Super root can submit a job for any user */
-			error("Security violation, REQUEST_SUBMIT_BATCH_PACK_JOB from uid=%d",
-			      uid);
-			error_code = ESLURM_USER_ID_MISSING;
+
+		if ((error_code = _valid_id("REQUEST_SUBMIT_BATCH_JOB",
+					    job_desc_msg, uid, gid))) {
+			reject_job = true;
 			break;
 		}
+
 		if ((job_desc_msg->alloc_node == NULL) ||
 		    (job_desc_msg->alloc_node[0] == '\0')) {
 			error("REQUEST_SUBMIT_BATCH_PACK_JOB lacks alloc_node from uid=%d",
@@ -4118,6 +4122,7 @@ static void _slurm_rpc_submit_batch_pack_job(slurm_msg_t *msg)
 			error_code = ESLURM_INVALID_NODE_NAME;
 			break;
 		}
+
 		dump_job_desc(job_desc_msg);
 
 		job_desc_msg->pack_job_offset = pack_job_offset;

