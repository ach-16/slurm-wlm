Author: Felip Moll <felip.moll@schedmd.com>
Date: Fri, 12 Jan 2018 14:19:25 +0100
Description: Add test_exec feature to multi-prog option of srun

 Now programs can be checked before execution if test_exec is set when using
 --multi-prog option.

Bug: https://bugs.schedmd.com/show_bug.cgi?id=4621

Index: slurm-llnl/src/plugins/launch/slurm/launch_slurm.c
===================================================================
--- slurm-llnl.orig/src/plugins/launch/slurm/launch_slurm.c
+++ slurm-llnl/src/plugins/launch/slurm/launch_slurm.c
@@ -543,7 +543,8 @@ extern int launch_p_setup_srun_opt(char
 }
 
 extern int launch_p_handle_multi_prog_verify(int command_pos,
-					     slurm_opt_t *opt_local)
+					     slurm_opt_t *opt_local,
+					     bool test_exec)
 {
 	srun_opt_t *srun_opt = opt_local->srun_opt;
 	xassert(srun_opt);
@@ -557,7 +558,9 @@ extern int launch_p_handle_multi_prog_ve
 		if (verify_multi_name(srun_opt->argv[command_pos],
 				      &opt_local->ntasks,
 				      &opt_local->ntasks_set,
-				      &srun_opt->multi_prog_cmds))
+				      &srun_opt->multi_prog_cmds,
+				      opt_local->cwd,
+				      test_exec))
 			exit(error_exit);
 		return 1;
 	} else
Index: slurm-llnl/src/srun/libsrun/launch.c
===================================================================
--- slurm-llnl.orig/src/srun/libsrun/launch.c
+++ slurm-llnl/src/srun/libsrun/launch.c
@@ -49,7 +49,8 @@
 
 typedef struct {
 	int (*setup_srun_opt)      (char **rest, slurm_opt_t *opt_local);
-	int (*handle_multi_prog)   (int command_pos, slurm_opt_t *opt_local);
+	int (*handle_multi_prog)   (int command_pos, slurm_opt_t *opt_local,
+				    bool test_exec);
 	int (*create_job_step)     (srun_job_t *job, bool use_all_cpus,
 				    void (*signal_function)(int),
 				    sig_atomic_t *destroy_job,
@@ -504,12 +505,13 @@ extern int launch_g_setup_srun_opt(char
 }
 
 extern int launch_g_handle_multi_prog_verify(int command_pos,
-					     slurm_opt_t *opt_local)
+					     slurm_opt_t *opt_local,
+					     bool test_exec)
 {
 	if (launch_init() < 0)
 		return 0;
 
-	return (*(ops.handle_multi_prog))(command_pos, opt_local);
+	return (*(ops.handle_multi_prog))(command_pos, opt_local, test_exec);
 }
 
 extern int launch_g_create_job_step(srun_job_t *job, bool use_all_cpus,
Index: slurm-llnl/src/srun/libsrun/launch.h
===================================================================
--- slurm-llnl.orig/src/srun/libsrun/launch.h
+++ slurm-llnl/src/srun/libsrun/launch.h
@@ -111,9 +111,12 @@ extern int launch_g_setup_srun_opt(char
  *                  spot the command is in opt.argv.
  * IN opt_local - options used for step creation
  *
+ * IN test_exec - Whether to check for execution permissions
  * RET 0 if not handled, 1 if handled
  */
-extern int launch_g_handle_multi_prog_verify(int command_pos, slurm_opt_t *opt_local);
+extern int launch_g_handle_multi_prog_verify(int command_pos,
+					     slurm_opt_t *opt_local,
+					     bool test_exec);
 
 /*
  * launch_g_create_job_step() creates the job step.
Index: slurm-llnl/src/srun/libsrun/multi_prog.c
===================================================================
--- slurm-llnl.orig/src/srun/libsrun/multi_prog.c
+++ slurm-llnl/src/srun/libsrun/multi_prog.c
@@ -58,6 +58,7 @@
 #include "src/common/xassert.h"
 #include "src/common/xmalloc.h"
 #include "src/common/xstring.h"
+#include "src/common/proc_args.h"
 
 #include "debugger.h"
 #include "multi_prog.h"
@@ -436,7 +437,7 @@ _validate_ranks(char *ranks, int *ntasks
  */
 extern int
 verify_multi_name(char *config_fname, int *ntasks, bool *ntasks_set,
-		  int32_t *ncmds)
+		  int32_t *ncmds, char * cwd, bool test_exec)
 {
 	FILE *config_fd;
 	char line[BUF_SIZE];
@@ -505,6 +506,14 @@ verify_multi_name(char *config_fname, in
 			rc = -1;
 			goto fini;
 		}
+		if (test_exec && !search_path(cwd,exec_name,true,X_OK,true))
+		{
+			error("Line %d of configuration file %s, "
+			      "program %s not executable",
+			      line_num, config_fname, exec_name);
+			rc = -1;
+			goto fini;
+		}
 	}
 
 	for (i = 0; i < *ntasks; i++) {
Index: slurm-llnl/src/srun/libsrun/multi_prog.h
===================================================================
--- slurm-llnl.orig/src/srun/libsrun/multi_prog.h
+++ slurm-llnl/src/srun/libsrun/multi_prog.h
@@ -60,11 +60,13 @@ extern int  mpir_set_multi_name(int ntas
  * IN config_name - MPMD configuration file name
  * IN/OUT ntasks - number of tasks to launch
  * IN/OUT ntasks_set - true if task count explicitly set by user
+ * IN cwd - CWD, may be changed by --chdir
+ * IN test_exec - Whether to check for exec permissions
  * OUT ncmds - number of commands
  * RET 0 on success, -1 otherwise
  */
 extern int verify_multi_name(char *config_fname, int *ntasks, bool *ntasks_set,
-			     int32_t *ncmds);
+			     int32_t *ncmds, char * cwd, bool test_exec);
 
 #endif
 
Index: slurm-llnl/src/srun/libsrun/opt.c
===================================================================
--- slurm-llnl.orig/src/srun/libsrun/opt.c
+++ slurm-llnl/src/srun/libsrun/opt.c
@@ -2469,7 +2469,7 @@ static void _opt_args(int argc, char **a
 	}
 #if defined HAVE_BG
 	/* BGQ's runjob command required a fully qualified path */
-	if (!launch_g_handle_multi_prog_verify(command_pos, &opt) &&
+	if (!launch_g_handle_multi_prog_verify(command_pos, &opt, test_exec) &&
 	    (sropt.argc > command_pos)) {
 		if ((fullpath = search_path(opt.cwd,
 					    sropt.argv[command_pos],
@@ -2480,7 +2480,7 @@ static void _opt_args(int argc, char **a
 	}
 #else
 	/* may exit() if an error with the multi_prog script */
-	(void) launch_g_handle_multi_prog_verify(command_pos, &opt);
+	(void) launch_g_handle_multi_prog_verify(command_pos, &opt, test_exec);
 
 	if (!sropt.multi_prog && (test_exec || sropt.bcast_flag)) {
 		if ((fullpath = search_path(opt.cwd, sropt.argv[command_pos],
